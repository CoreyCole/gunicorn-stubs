# Stubs for gunicorn.config (Python 3.7)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

KNOWN_SETTINGS: Any
PLATFORM: Any

def make_settings(ignore: Optional[Any] = ...): ...
def auto_int(_: Any, x: Any): ...

class Config:
    settings: Any = ...
    usage: Any = ...
    prog: Any = ...
    env_orig: Any = ...
    def __init__(self, usage: Optional[Any] = ..., prog: Optional[Any] = ...) -> None: ...
    def __getattr__(self, name: Any): ...
    def __setattr__(self, name: Any, value: Any) -> None: ...
    def set(self, name: Any, value: Any) -> None: ...
    def get_cmd_args_from_env(self): ...
    def parser(self): ...
    @property
    def worker_class_str(self): ...
    @property
    def worker_class(self): ...
    @property
    def address(self): ...
    @property
    def uid(self): ...
    @property
    def gid(self): ...
    @property
    def proc_name(self): ...
    @property
    def logger_class(self): ...
    @property
    def is_ssl(self): ...
    @property
    def ssl_options(self): ...
    @property
    def env(self): ...
    @property
    def sendfile(self): ...
    @property
    def reuse_port(self): ...
    @property
    def paste_global_conf(self): ...

class SettingMeta(type):
    def __new__(cls, name: Any, bases: Any, attrs: Any): ...
    def fmt_desc(cls, desc: Any) -> None: ...

class Setting:
    name: Any = ...
    value: Any = ...
    section: Any = ...
    cli: Any = ...
    validator: Any = ...
    type: Any = ...
    meta: Any = ...
    action: Any = ...
    default: Any = ...
    short: Any = ...
    desc: Any = ...
    nargs: Any = ...
    const: Any = ...
    def __init__(self) -> None: ...
    def add_option(self, parser: Any): ...
    def copy(self): ...
    def get(self): ...
    def set(self, val: Any) -> None: ...
    def __lt__(self, other: Any): ...
    __cmp__: Any = ...

def validate_bool(val: Any): ...
def validate_dict(val: Any): ...
def validate_pos_int(val: Any): ...
def validate_string(val: Any): ...
def validate_file_exists(val: Any): ...
def validate_list_string(val: Any): ...
def validate_list_of_existing_files(val: Any): ...
def validate_string_to_list(val: Any): ...
def validate_class(val: Any): ...
def validate_callable(arity: Any): ...
def validate_user(val: Any): ...
def validate_group(val: Any): ...
def validate_post_request(val: Any): ...
def validate_chdir(val: Any): ...
def validate_hostport(val: Any): ...
def validate_reload_engine(val: Any): ...
def get_default_config_file(): ...

class ConfigFile(Setting):
    name: str = ...
    section: str = ...
    cli: Any = ...
    meta: str = ...
    validator: Any = ...
    default: Any = ...
    desc: str = ...

class Bind(Setting):
    name: str = ...
    action: str = ...
    section: str = ...
    cli: Any = ...
    meta: str = ...
    validator: Any = ...
    default: Any = ...
    desc: str = ...

class Backlog(Setting):
    name: str = ...
    section: str = ...
    cli: Any = ...
    meta: str = ...
    validator: Any = ...
    type: Any = ...
    default: int = ...
    desc: str = ...

class Workers(Setting):
    name: str = ...
    section: str = ...
    cli: Any = ...
    meta: str = ...
    validator: Any = ...
    type: Any = ...
    default: Any = ...
    desc: str = ...

class WorkerClass(Setting):
    name: str = ...
    section: str = ...
    cli: Any = ...
    meta: str = ...
    validator: Any = ...
    default: str = ...
    desc: str = ...

class WorkerThreads(Setting):
    name: str = ...
    section: str = ...
    cli: Any = ...
    meta: str = ...
    validator: Any = ...
    type: Any = ...
    default: int = ...
    desc: str = ...

class WorkerConnections(Setting):
    name: str = ...
    section: str = ...
    cli: Any = ...
    meta: str = ...
    validator: Any = ...
    type: Any = ...
    default: int = ...
    desc: str = ...

class MaxRequests(Setting):
    name: str = ...
    section: str = ...
    cli: Any = ...
    meta: str = ...
    validator: Any = ...
    type: Any = ...
    default: int = ...
    desc: str = ...

class MaxRequestsJitter(Setting):
    name: str = ...
    section: str = ...
    cli: Any = ...
    meta: str = ...
    validator: Any = ...
    type: Any = ...
    default: int = ...
    desc: str = ...

class Timeout(Setting):
    name: str = ...
    section: str = ...
    cli: Any = ...
    meta: str = ...
    validator: Any = ...
    type: Any = ...
    default: int = ...
    desc: str = ...

class GracefulTimeout(Setting):
    name: str = ...
    section: str = ...
    cli: Any = ...
    meta: str = ...
    validator: Any = ...
    type: Any = ...
    default: int = ...
    desc: str = ...

class Keepalive(Setting):
    name: str = ...
    section: str = ...
    cli: Any = ...
    meta: str = ...
    validator: Any = ...
    type: Any = ...
    default: int = ...
    desc: str = ...

class LimitRequestLine(Setting):
    name: str = ...
    section: str = ...
    cli: Any = ...
    meta: str = ...
    validator: Any = ...
    type: Any = ...
    default: int = ...
    desc: str = ...

class LimitRequestFields(Setting):
    name: str = ...
    section: str = ...
    cli: Any = ...
    meta: str = ...
    validator: Any = ...
    type: Any = ...
    default: int = ...
    desc: str = ...

class LimitRequestFieldSize(Setting):
    name: str = ...
    section: str = ...
    cli: Any = ...
    meta: str = ...
    validator: Any = ...
    type: Any = ...
    default: int = ...
    desc: str = ...

class Reload(Setting):
    name: str = ...
    section: str = ...
    cli: Any = ...
    validator: Any = ...
    action: str = ...
    default: bool = ...
    desc: str = ...

class ReloadEngine(Setting):
    name: str = ...
    section: str = ...
    cli: Any = ...
    meta: str = ...
    validator: Any = ...
    default: str = ...
    desc: str = ...

class ReloadExtraFiles(Setting):
    name: str = ...
    action: str = ...
    section: str = ...
    cli: Any = ...
    meta: str = ...
    validator: Any = ...
    default: Any = ...
    desc: str = ...

class Spew(Setting):
    name: str = ...
    section: str = ...
    cli: Any = ...
    validator: Any = ...
    action: str = ...
    default: bool = ...
    desc: str = ...

class ConfigCheck(Setting):
    name: str = ...
    section: str = ...
    cli: Any = ...
    validator: Any = ...
    action: str = ...
    default: bool = ...
    desc: str = ...

class PreloadApp(Setting):
    name: str = ...
    section: str = ...
    cli: Any = ...
    validator: Any = ...
    action: str = ...
    default: bool = ...
    desc: str = ...

class Sendfile(Setting):
    name: str = ...
    section: str = ...
    cli: Any = ...
    validator: Any = ...
    action: str = ...
    const: bool = ...
    desc: str = ...

class ReusePort(Setting):
    name: str = ...
    section: str = ...
    cli: Any = ...
    validator: Any = ...
    action: str = ...
    default: bool = ...
    desc: str = ...

class Chdir(Setting):
    name: str = ...
    section: str = ...
    cli: Any = ...
    validator: Any = ...
    default: Any = ...
    desc: str = ...

class Daemon(Setting):
    name: str = ...
    section: str = ...
    cli: Any = ...
    validator: Any = ...
    action: str = ...
    default: bool = ...
    desc: str = ...

class Env(Setting):
    name: str = ...
    action: str = ...
    section: str = ...
    cli: Any = ...
    meta: str = ...
    validator: Any = ...
    default: Any = ...
    desc: str = ...

class Pidfile(Setting):
    name: str = ...
    section: str = ...
    cli: Any = ...
    meta: str = ...
    validator: Any = ...
    default: Any = ...
    desc: str = ...

class WorkerTmpDir(Setting):
    name: str = ...
    section: str = ...
    cli: Any = ...
    meta: str = ...
    validator: Any = ...
    default: Any = ...
    desc: str = ...

class User(Setting):
    name: str = ...
    section: str = ...
    cli: Any = ...
    meta: str = ...
    validator: Any = ...
    default: Any = ...
    desc: str = ...

class Group(Setting):
    name: str = ...
    section: str = ...
    cli: Any = ...
    meta: str = ...
    validator: Any = ...
    default: Any = ...
    desc: str = ...

class Umask(Setting):
    name: str = ...
    section: str = ...
    cli: Any = ...
    meta: str = ...
    validator: Any = ...
    type: Any = ...
    default: int = ...
    desc: str = ...

class Initgroups(Setting):
    name: str = ...
    section: str = ...
    cli: Any = ...
    validator: Any = ...
    action: str = ...
    default: bool = ...
    desc: str = ...

class TmpUploadDir(Setting):
    name: str = ...
    section: str = ...
    meta: str = ...
    validator: Any = ...
    default: Any = ...
    desc: str = ...

class SecureSchemeHeader(Setting):
    name: str = ...
    section: str = ...
    validator: Any = ...
    default: Any = ...
    desc: str = ...

class ForwardedAllowIPS(Setting):
    name: str = ...
    section: str = ...
    cli: Any = ...
    meta: str = ...
    validator: Any = ...
    default: Any = ...
    desc: str = ...

class AccessLog(Setting):
    name: str = ...
    section: str = ...
    cli: Any = ...
    meta: str = ...
    validator: Any = ...
    default: Any = ...
    desc: str = ...

class DisableRedirectAccessToSyslog(Setting):
    name: str = ...
    section: str = ...
    cli: Any = ...
    validator: Any = ...
    action: str = ...
    default: bool = ...
    desc: str = ...

class AccessLogFormat(Setting):
    name: str = ...
    section: str = ...
    cli: Any = ...
    meta: str = ...
    validator: Any = ...
    default: str = ...
    desc: str = ...

class ErrorLog(Setting):
    name: str = ...
    section: str = ...
    cli: Any = ...
    meta: str = ...
    validator: Any = ...
    default: str = ...
    desc: str = ...

class Loglevel(Setting):
    name: str = ...
    section: str = ...
    cli: Any = ...
    meta: str = ...
    validator: Any = ...
    default: str = ...
    desc: str = ...

class CaptureOutput(Setting):
    name: str = ...
    section: str = ...
    cli: Any = ...
    validator: Any = ...
    action: str = ...
    default: bool = ...
    desc: str = ...

class LoggerClass(Setting):
    name: str = ...
    section: str = ...
    cli: Any = ...
    meta: str = ...
    validator: Any = ...
    default: str = ...
    desc: str = ...

class LogConfig(Setting):
    name: str = ...
    section: str = ...
    cli: Any = ...
    meta: str = ...
    validator: Any = ...
    default: Any = ...
    desc: str = ...

class LogConfigDict(Setting):
    name: str = ...
    section: str = ...
    cli: Any = ...
    validator: Any = ...
    default: Any = ...
    desc: str = ...

class SyslogTo(Setting):
    name: str = ...
    section: str = ...
    cli: Any = ...
    meta: str = ...
    validator: Any = ...
    default: str = ...
    desc: str = ...

class Syslog(Setting):
    name: str = ...
    section: str = ...
    cli: Any = ...
    validator: Any = ...
    action: str = ...
    default: bool = ...
    desc: str = ...

class SyslogPrefix(Setting):
    name: str = ...
    section: str = ...
    cli: Any = ...
    meta: str = ...
    validator: Any = ...
    default: Any = ...
    desc: str = ...

class SyslogFacility(Setting):
    name: str = ...
    section: str = ...
    cli: Any = ...
    meta: str = ...
    validator: Any = ...
    default: str = ...
    desc: str = ...

class EnableStdioInheritance(Setting):
    name: str = ...
    section: str = ...
    cli: Any = ...
    validator: Any = ...
    default: bool = ...
    action: str = ...
    desc: str = ...

class StatsdHost(Setting):
    name: str = ...
    section: str = ...
    cli: Any = ...
    meta: str = ...
    default: Any = ...
    validator: Any = ...
    desc: str = ...

class StatsdPrefix(Setting):
    name: str = ...
    section: str = ...
    cli: Any = ...
    meta: str = ...
    default: str = ...
    validator: Any = ...
    desc: str = ...

class Procname(Setting):
    name: str = ...
    section: str = ...
    cli: Any = ...
    meta: str = ...
    validator: Any = ...
    default: Any = ...
    desc: str = ...

class DefaultProcName(Setting):
    name: str = ...
    section: str = ...
    validator: Any = ...
    default: str = ...
    desc: str = ...

class PythonPath(Setting):
    name: str = ...
    section: str = ...
    cli: Any = ...
    meta: str = ...
    validator: Any = ...
    default: Any = ...
    desc: str = ...

class Paste(Setting):
    name: str = ...
    section: str = ...
    cli: Any = ...
    meta: str = ...
    validator: Any = ...
    default: Any = ...
    desc: str = ...

class OnStarting(Setting):
    name: str = ...
    section: str = ...
    validator: Any = ...
    type: Any = ...
    def on_starting(server: Any) -> None: ...
    default: Any = ...
    desc: str = ...

class OnReload(Setting):
    name: str = ...
    section: str = ...
    validator: Any = ...
    type: Any = ...
    def on_reload(server: Any) -> None: ...
    default: Any = ...
    desc: str = ...

class WhenReady(Setting):
    name: str = ...
    section: str = ...
    validator: Any = ...
    type: Any = ...
    def when_ready(server: Any) -> None: ...
    default: Any = ...
    desc: str = ...

class Prefork(Setting):
    name: str = ...
    section: str = ...
    validator: Any = ...
    type: Any = ...
    def pre_fork(server: Any, worker: Any) -> None: ...
    default: Any = ...
    desc: str = ...

class Postfork(Setting):
    name: str = ...
    section: str = ...
    validator: Any = ...
    type: Any = ...
    def post_fork(server: Any, worker: Any) -> None: ...
    default: Any = ...
    desc: str = ...

class PostWorkerInit(Setting):
    name: str = ...
    section: str = ...
    validator: Any = ...
    type: Any = ...
    def post_worker_init(worker: Any) -> None: ...
    default: Any = ...
    desc: str = ...

class WorkerInt(Setting):
    name: str = ...
    section: str = ...
    validator: Any = ...
    type: Any = ...
    def worker_int(worker: Any) -> None: ...
    default: Any = ...
    desc: str = ...

class WorkerAbort(Setting):
    name: str = ...
    section: str = ...
    validator: Any = ...
    type: Any = ...
    def worker_abort(worker: Any) -> None: ...
    default: Any = ...
    desc: str = ...

class PreExec(Setting):
    name: str = ...
    section: str = ...
    validator: Any = ...
    type: Any = ...
    def pre_exec(server: Any) -> None: ...
    default: Any = ...
    desc: str = ...

class PreRequest(Setting):
    name: str = ...
    section: str = ...
    validator: Any = ...
    type: Any = ...
    def pre_request(worker: Any, req: Any) -> None: ...
    default: Any = ...
    desc: str = ...

class PostRequest(Setting):
    name: str = ...
    section: str = ...
    validator: Any = ...
    type: Any = ...
    def post_request(worker: Any, req: Any, environ: Any, resp: Any) -> None: ...
    default: Any = ...
    desc: str = ...

class ChildExit(Setting):
    name: str = ...
    section: str = ...
    validator: Any = ...
    type: Any = ...
    def child_exit(server: Any, worker: Any) -> None: ...
    default: Any = ...
    desc: str = ...

class WorkerExit(Setting):
    name: str = ...
    section: str = ...
    validator: Any = ...
    type: Any = ...
    def worker_exit(server: Any, worker: Any) -> None: ...
    default: Any = ...
    desc: str = ...

class NumWorkersChanged(Setting):
    name: str = ...
    section: str = ...
    validator: Any = ...
    type: Any = ...
    def nworkers_changed(server: Any, new_value: Any, old_value: Any) -> None: ...
    default: Any = ...
    desc: str = ...

class OnExit(Setting):
    name: str = ...
    section: str = ...
    validator: Any = ...
    def on_exit(server: Any) -> None: ...
    default: Any = ...
    desc: str = ...

class ProxyProtocol(Setting):
    name: str = ...
    section: str = ...
    cli: Any = ...
    validator: Any = ...
    default: bool = ...
    action: str = ...
    desc: str = ...

class ProxyAllowFrom(Setting):
    name: str = ...
    section: str = ...
    cli: Any = ...
    validator: Any = ...
    default: str = ...
    desc: str = ...

class KeyFile(Setting):
    name: str = ...
    section: str = ...
    cli: Any = ...
    meta: str = ...
    validator: Any = ...
    default: Any = ...
    desc: str = ...

class CertFile(Setting):
    name: str = ...
    section: str = ...
    cli: Any = ...
    meta: str = ...
    validator: Any = ...
    default: Any = ...
    desc: str = ...

class SSLVersion(Setting):
    name: str = ...
    section: str = ...
    cli: Any = ...
    validator: Any = ...
    default: Any = ...
    desc: str = ...

class CertReqs(Setting):
    name: str = ...
    section: str = ...
    cli: Any = ...
    validator: Any = ...
    default: Any = ...
    desc: str = ...

class CACerts(Setting):
    name: str = ...
    section: str = ...
    cli: Any = ...
    meta: str = ...
    validator: Any = ...
    default: Any = ...
    desc: str = ...

class SuppressRaggedEOFs(Setting):
    name: str = ...
    section: str = ...
    cli: Any = ...
    action: str = ...
    default: bool = ...
    validator: Any = ...
    desc: str = ...

class DoHandshakeOnConnect(Setting):
    name: str = ...
    section: str = ...
    cli: Any = ...
    validator: Any = ...
    action: str = ...
    default: bool = ...
    desc: str = ...

class Ciphers(Setting):
    name: str = ...
    section: str = ...
    cli: Any = ...
    validator: Any = ...
    default: str = ...
    desc: str = ...

class PasteGlobalConf(Setting):
    name: str = ...
    action: str = ...
    section: str = ...
    cli: Any = ...
    meta: str = ...
    validator: Any = ...
    default: Any = ...
    desc: str = ...
