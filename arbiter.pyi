# Stubs for gunicorn.arbiter (Python 3.7)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

class Arbiter:
    WORKER_BOOT_ERROR: int = ...
    APP_LOAD_ERROR: int = ...
    START_CTX: Any = ...
    LISTENERS: Any = ...
    WORKERS: Any = ...
    PIPE: Any = ...
    SIG_QUEUE: Any = ...
    SIGNALS: Any = ...
    SIG_NAMES: Any = ...
    log: Any = ...
    pidfile: Any = ...
    systemd: bool = ...
    worker_age: int = ...
    reexec_pid: int = ...
    master_pid: int = ...
    master_name: str = ...
    def __init__(self, app: Any) -> None: ...
    num_workers: Any = ...
    app: Any = ...
    cfg: Any = ...
    worker_class: Any = ...
    address: Any = ...
    timeout: Any = ...
    proc_name: Any = ...
    def setup(self, app: Any): ...
    pid: Any = ...
    def start(self) -> None: ...
    def init_signals(self) -> None: ...
    def signal(self, sig: Any, frame: Any) -> None: ...
    def run(self) -> None: ...
    def handle_chld(self, sig: Any, frame: Any) -> None: ...
    def handle_hup(self) -> None: ...
    def handle_term(self) -> None: ...
    def handle_int(self) -> None: ...
    def handle_quit(self) -> None: ...
    def handle_ttin(self) -> None: ...
    def handle_ttou(self): ...
    def handle_usr1(self) -> None: ...
    def handle_usr2(self) -> None: ...
    def handle_winch(self) -> None: ...
    def maybe_promote_master(self): ...
    def wakeup(self) -> None: ...
    def halt(self, reason: Optional[Any] = ..., exit_status: int = ...) -> None: ...
    def sleep(self): ...
    def stop(self, graceful: bool = ...) -> None: ...
    def reexec(self): ...
    def reload(self) -> None: ...
    def murder_workers(self): ...
    def reap_workers(self) -> None: ...
    def manage_workers(self): ...
    def spawn_worker(self): ...
    def spawn_workers(self) -> None: ...
    def kill_workers(self, sig: Any) -> None: ...
    def kill_worker(self, pid: Any, sig: Any): ...
