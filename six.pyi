# Stubs for gunicorn.six (Python 3.7)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import types
from typing import Any, Optional, Union

PY2: Any
PY3: Any
string_types: Any
integer_types: Any
class_types: Any
text_type = str
binary_type = Union[bytes, str]
MAXSIZE: Any

class X:
    def __len__(self): ...

class _LazyDescr:
    name: Any = ...
    def __init__(self, name: Any) -> None: ...
    def __get__(self, obj: Any, tp: Any): ...

class MovedModule(_LazyDescr):
    mod: Any = ...
    def __init__(self, name: Any, old: Any, new: Optional[Any] = ...) -> None: ...
    def __getattr__(self, attr: Any): ...

class _LazyModule(types.ModuleType):
    __doc__: Any = ...
    def __init__(self, name: Any) -> None: ...
    def __dir__(self): ...

class MovedAttribute(_LazyDescr):
    mod: Any = ...
    attr: Any = ...
    def __init__(self, name: Any, old_mod: Any, new_mod: Any, old_attr: Optional[Any] = ..., new_attr: Optional[Any] = ...) -> None: ...

class _SixMetaPathImporter:
    name: Any = ...
    known_modules: Any = ...
    def __init__(self, six_module_name: Any) -> None: ...
    def find_module(self, fullname: Any, path: Optional[Any] = ...): ...
    def load_module(self, fullname: Any): ...
    def is_package(self, fullname: Any): ...
    def get_code(self, fullname: Any): ...
    get_source: Any = ...

class _MovedItems(_LazyModule):
    __path__: Any = ...

moves: Any

class Module_six_moves_urllib_parse(_LazyModule): ...
class Module_six_moves_urllib_error(_LazyModule): ...
class Module_six_moves_urllib_request(_LazyModule): ...
class Module_six_moves_urllib_response(_LazyModule): ...
class Module_six_moves_urllib_robotparser(_LazyModule): ...

class Module_six_moves_urllib(types.ModuleType):
    __path__: Any = ...
    parse: Any = ...
    error: Any = ...
    request: Any = ...
    response: Any = ...
    robotparser: Any = ...
    def __dir__(self): ...

def add_move(move: Any) -> None: ...
def remove_move(name: Any) -> None: ...
advance_iterator: Any
next: Any
callable: Any

def get_unbound_function(unbound: Any): ...

create_bound_method: Any

class Iterator:
    def next(self): ...
get_method_function: Any
get_method_self: Any
get_function_closure: Any
get_function_code: Any
get_function_defaults: Any
get_function_globals: Any

def iterkeys(d: Any, **kw: Any): ...
def itervalues(d: Any, **kw: Any): ...
def iteritems(d: Any, **kw: Any): ...
def iterlists(d: Any, **kw: Any): ...
def b(s: Any): ...
def u(s: Any): ...
unichr: Any

def int2byte(i: Any): ...

byte2int: Any
indexbytes: Any
iterbytes = iter
StringIO: Any
BytesIO: Any
unichr = unichr
exec_: Any

def reraise(tp: Any, value: Any, tb: Optional[Any] = ...) -> None: ...

print_: Any

def wraps(wrapped: Any, assigned: Any = ..., updated: Any = ...): ...

def with_metaclass(meta: Any, *bases: Any): ...
def add_metaclass(metaclass: Any): ...

__path__: Any
__package__ = __name__
