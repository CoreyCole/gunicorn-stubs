# Stubs for gunicorn.argparse_compat (Python 3.7)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

basestring = str
SUPPRESS: str
OPTIONAL: str
ZERO_OR_MORE: str
ONE_OR_MORE: str
PARSER: str
REMAINDER: str

class _AttributeHolder: ...

class HelpFormatter:
    def __init__(self, prog: Any, indent_increment: int = ..., max_help_position: int = ..., width: Optional[Any] = ...) -> None: ...
    class _Section:
        formatter: Any = ...
        parent: Any = ...
        heading: Any = ...
        items: Any = ...
        def __init__(self, formatter: Any, parent: Any, heading: Optional[Any] = ...) -> None: ...
        def format_help(self): ...
    def start_section(self, heading: Any) -> None: ...
    def end_section(self) -> None: ...
    def add_text(self, text: Any) -> None: ...
    def add_usage(self, usage: Any, actions: Any, groups: Any, prefix: Optional[Any] = ...) -> None: ...
    def add_argument(self, action: Any) -> None: ...
    def add_arguments(self, actions: Any) -> None: ...
    def format_help(self): ...

class RawDescriptionHelpFormatter(HelpFormatter): ...
class RawTextHelpFormatter(RawDescriptionHelpFormatter): ...
class ArgumentDefaultsHelpFormatter(HelpFormatter): ...

class ArgumentError(Exception):
    argument_name: Any = ...
    message: Any = ...
    def __init__(self, argument: Any, message: Any) -> None: ...

class ArgumentTypeError(Exception): ...

class Action(_AttributeHolder):
    option_strings: Any = ...
    dest: Any = ...
    nargs: Any = ...
    const: Any = ...
    default: Any = ...
    type: Any = ...
    choices: Any = ...
    required: Any = ...
    help: Any = ...
    metavar: Any = ...
    def __init__(self, option_strings: Any, dest: Any, nargs: Optional[Any] = ..., const: Optional[Any] = ..., default: Optional[Any] = ..., type: Optional[Any] = ..., choices: Optional[Any] = ..., required: bool = ..., help: Optional[Any] = ..., metavar: Optional[Any] = ...) -> None: ...
    def __call__(self, parser: Any, namespace: Any, values: Any, option_string: Optional[Any] = ...) -> None: ...

class _StoreAction(Action):
    def __init__(self, option_strings: Any, dest: Any, nargs: Optional[Any] = ..., const: Optional[Any] = ..., default: Optional[Any] = ..., type: Optional[Any] = ..., choices: Optional[Any] = ..., required: bool = ..., help: Optional[Any] = ..., metavar: Optional[Any] = ...) -> None: ...
    def __call__(self, parser: Any, namespace: Any, values: Any, option_string: Optional[Any] = ...) -> None: ...

class _StoreConstAction(Action):
    def __init__(self, option_strings: Any, dest: Any, const: Any, default: Optional[Any] = ..., required: bool = ..., help: Optional[Any] = ..., metavar: Optional[Any] = ...) -> None: ...
    def __call__(self, parser: Any, namespace: Any, values: Any, option_string: Optional[Any] = ...) -> None: ...

class _StoreTrueAction(_StoreConstAction):
    def __init__(self, option_strings: Any, dest: Any, default: bool = ..., required: bool = ..., help: Optional[Any] = ...) -> None: ...

class _StoreFalseAction(_StoreConstAction):
    def __init__(self, option_strings: Any, dest: Any, default: bool = ..., required: bool = ..., help: Optional[Any] = ...) -> None: ...

class _AppendAction(Action):
    def __init__(self, option_strings: Any, dest: Any, nargs: Optional[Any] = ..., const: Optional[Any] = ..., default: Optional[Any] = ..., type: Optional[Any] = ..., choices: Optional[Any] = ..., required: bool = ..., help: Optional[Any] = ..., metavar: Optional[Any] = ...) -> None: ...
    def __call__(self, parser: Any, namespace: Any, values: Any, option_string: Optional[Any] = ...) -> None: ...

class _AppendConstAction(Action):
    def __init__(self, option_strings: Any, dest: Any, const: Any, default: Optional[Any] = ..., required: bool = ..., help: Optional[Any] = ..., metavar: Optional[Any] = ...) -> None: ...
    def __call__(self, parser: Any, namespace: Any, values: Any, option_string: Optional[Any] = ...) -> None: ...

class _CountAction(Action):
    def __init__(self, option_strings: Any, dest: Any, default: Optional[Any] = ..., required: bool = ..., help: Optional[Any] = ...) -> None: ...
    def __call__(self, parser: Any, namespace: Any, values: Any, option_string: Optional[Any] = ...) -> None: ...

class _HelpAction(Action):
    def __init__(self, option_strings: Any, dest: Any = ..., default: Any = ..., help: Optional[Any] = ...) -> None: ...
    def __call__(self, parser: Any, namespace: Any, values: Any, option_string: Optional[Any] = ...) -> None: ...

class _VersionAction(Action):
    version: Any = ...
    def __init__(self, option_strings: Any, version: Optional[Any] = ..., dest: Any = ..., default: Any = ..., help: str = ...) -> None: ...
    def __call__(self, parser: Any, namespace: Any, values: Any, option_string: Optional[Any] = ...) -> None: ...

class _SubParsersAction(Action):
    class _ChoicesPseudoAction(Action):
        def __init__(self, name: Any, help: Any) -> None: ...
    def __init__(self, option_strings: Any, prog: Any, parser_class: Any, dest: Any = ..., help: Optional[Any] = ..., metavar: Optional[Any] = ...) -> None: ...
    def add_parser(self, name: Any, **kwargs: Any): ...
    def __call__(self, parser: Any, namespace: Any, values: Any, option_string: Optional[Any] = ...) -> None: ...

class FileType:
    def __init__(self, mode: str = ..., bufsize: Optional[Any] = ...) -> None: ...
    def __call__(self, string: Any): ...

class Namespace(_AttributeHolder):
    def __init__(self, **kwargs: Any) -> None: ...
    __hash__: Any = ...
    def __eq__(self, other: Any): ...
    def __ne__(self, other: Any): ...
    def __contains__(self, key: Any): ...

class _ActionsContainer:
    description: Any = ...
    argument_default: Any = ...
    prefix_chars: Any = ...
    conflict_handler: Any = ...
    def __init__(self, description: Any, prefix_chars: Any, argument_default: Any, conflict_handler: Any) -> None: ...
    def register(self, registry_name: Any, value: Any, object: Any) -> None: ...
    def set_defaults(self, **kwargs: Any) -> None: ...
    def get_default(self, dest: Any): ...
    def add_argument(self, *args: Any, **kwargs: Any): ...
    def add_argument_group(self, *args: Any, **kwargs: Any): ...
    def add_mutually_exclusive_group(self, **kwargs: Any): ...

class _ArgumentGroup(_ActionsContainer):
    title: Any = ...
    def __init__(self, container: Any, title: Optional[Any] = ..., description: Optional[Any] = ..., **kwargs: Any) -> None: ...

class _MutuallyExclusiveGroup(_ArgumentGroup):
    required: Any = ...
    def __init__(self, container: Any, required: bool = ...) -> None: ...

class ArgumentParser(_AttributeHolder, _ActionsContainer):
    prog: Any = ...
    usage: Any = ...
    epilog: Any = ...
    version: Any = ...
    formatter_class: Any = ...
    fromfile_prefix_chars: Any = ...
    add_help: Any = ...
    def __init__(self, prog: Optional[Any] = ..., usage: Optional[Any] = ..., description: Optional[Any] = ..., epilog: Optional[Any] = ..., version: Optional[Any] = ..., parents: Any = ..., formatter_class: Any = ..., prefix_chars: str = ..., fromfile_prefix_chars: Optional[Any] = ..., argument_default: Optional[Any] = ..., conflict_handler: str = ..., add_help: bool = ...) -> None: ...
    def add_subparsers(self, **kwargs: Any): ...
    def parse_args(self, args: Optional[Any] = ..., namespace: Optional[Any] = ...): ...
    def parse_known_args(self, args: Optional[Any] = ..., namespace: Optional[Any] = ...): ...
    def convert_arg_line_to_args(self, arg_line: Any): ...
    def format_usage(self): ...
    def format_help(self): ...
    def format_version(self): ...
    def print_usage(self, file: Optional[Any] = ...) -> None: ...
    def print_help(self, file: Optional[Any] = ...) -> None: ...
    def print_version(self, file: Optional[Any] = ...) -> None: ...
    def exit(self, status: int = ..., message: Optional[Any] = ...) -> None: ...
    def error(self, message: Any) -> None: ...
